# Production compose file. Don't mount any local directories from the
# repository in here, that can be done in the override file - for development.

services:
  postgres:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    command: postgres -c custom.authenticator_password=$PG_AUTHENTICATOR_PASSWORD
    environment:
      POSTGRES_USER: $PG_USER
      POSTGRES_PASSWORD: $PG_PASS
      POSTGRES_DB: app
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", $PG_USER, "-h", "localhost", "-d", "app"]
      interval: 3s
      timeout: 5s
      retries: 10

  iko:
    image: ghcr.io/explodinglabs/iko:0.1.0
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no" # Run once and stop
    entrypoint: ""
    command: sqitch status

  postgrest:
    image: postgrest/postgrest:v12.2.8
    depends_on:
      iko:
        condition: service_completed_successfully
    environment:
      PGRST_APP_SETTINGS_JWT_EXP: $JWT_EXPIRY
      PGRST_APP_SETTINGS_JWT_SECRET: $JWT_SECRET
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: api
      PGRST_DB_URI: postgres://authenticator:${PG_AUTHENTICATOR_PASSWORD}@postgres:5432/app
      PGRST_DB_USE_LEGACY_GUCS: false
      PGRST_JWT_SECRET: $JWT_SECRET

  swagger-ui:
    image: swaggerapi/swagger-ui:v5.20.1
    ports:
      - "8080:8080"
    environment:
      SWAGGER_JSON_URL: "http://localhost:8000/rest/"
    depends_on:
      - postgrest

  caddy:
    image: caddy:2
    depends_on:
      postgrest:
        condition: service_started
      swagger-ui:
        condition: service_started
    ports:
      - $CADDY_PORT:80
      - 443:443
    volumes:
      - caddy_data:/data:rw
      - caddy_config:/config:rw

volumes:
  postgres_data:
  caddy_data:
  caddy_config:
