# Production compose file. Don't mount any local directories from the
# repository in here, that can be done in the override file - for development.

services:
  postgres:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    environment:
      POSTGRES_USER: $PG_USER
      POSTGRES_PASSWORD: $PG_PASS
      POSTGRES_DB: app
    command: postgres -c custom.authenticator_password=$POSTGREST_AUTHENTICATOR_PASS
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", $PG_USER, "-h", "localhost", "-d", "app"]
      interval: 2s
      timeout: 5s
      retries: 10

  iko:
    image: ghcr.io/explodinglabs/iko:0.1.0
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PG_USER: $PG_USER
      PG_PASS: $PG_PASS
      POSTGREST_AUTHENTICATOR_PASS: $POSTGREST_AUTHENTICATOR_PASS
    volumes:
      - ./migrations:/repo:rw
      - ./scripts:/scripts:ro
      - ./caddy/conf:/etc/caddy:ro
    restart: "no" # Run once and stop
    # Command is inlined to avoid needing a mounted scripts volume.
    command: >
      /bin/bash -c '
        set -euo pipefail
        if [ ! -f /repo/.iko-initialised ]; then
          init --engine pg --target=postgres://${PG_USER}:${PG_PASS}@postgres:5432/app myapp
          create_login_role authenticator $POSTGREST_AUTHENTICATOR_PASS
          create_role anon
          grant_role_membership authenticator anon
          create_schema api
          deploy --verify
          touch /repo/.iko-initialised
        fi
      '

  postgrest:
    image: postgrest/postgrest:v12.2.8
    depends_on:
      iko:
        condition: service_completed_successfully
    environment:
      PGRST_APP_SETTINGS_JWT_EXP: 3600
      PGRST_APP_SETTINGS_JWT_SECRET: $JWT_SECRET
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: api
      PGRST_DB_URI: postgres://authenticator:${POSTGREST_AUTHENTICATOR_PASS}@postgres:5432/app
      PGRST_DB_USE_LEGACY_GUCS: false
      PGRST_JWT_SECRET: $JWT_SECRET

  swagger-ui:
    image: swaggerapi/swagger-ui:v5.20.1
    environment:
      SWAGGER_JSON_URL: "http://localhost:8000/rest/"
    depends_on:
      - postgrest

  caddy:
    image: caddy:2
    depends_on:
      postgrest:
        condition: service_started
      swagger-ui:
        condition: service_started
    ports:
      - $CADDY_PORT:80
      - 443:443
    environment:
      CADDY_AUTO_HTTPS: $CADDY_AUTO_HTTPS
    volumes:
      - caddy_data:/data:rw
      - caddy_config:/config:rw

volumes:
  postgres_data:
  caddy_config:
  caddy_data:
